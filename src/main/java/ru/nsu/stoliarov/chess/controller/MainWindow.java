package ru.nsu.stoliarov.chess.controller;

import ru.nsu.stoliarov.chess.model.field.GameField;
import ru.nsu.stoliarov.chess.model.pieces.Piece;
import ru.nsu.stoliarov.chess.view.panels.GamePanel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

import static javax.swing.JOptionPane.INFORMATION_MESSAGE;

public class MainWindow extends JFrame {
	public MainWindow() {
		$$$setupUI$$$();
		
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		setFocusable(true);
		this.getContentPane().add(mainPanel);
		
		initMouseListeners();
		initModelListeners();
		initButtonListeners();
	}
	
	public GameField getGameField() {
		return gameField;
	}
	
	private void initButtonListeners() {
		restartButton.addActionListener(actionEvent -> {
			gameField.restart();
			restart();
			gamePanel.repaint();
		});
		
		drawButton.addActionListener(actionEvent -> {
			JOptionPane.showMessageDialog(null, "Draw on demand!", "Game Over", INFORMATION_MESSAGE);
			gameField.restart();
			restart();
			gamePanel.repaint();
		});
	}
	
	private void initMouseListeners() {
		addMouseMotionListener(new MouseMotionListener() {
			@Override
			public void mouseDragged(MouseEvent mouseEvent) {
				gamePanel.setActivePieceDisplacementX(mouseEvent.getX() - gamePanel.getX());
				gamePanel.setActivePieceDisplacementY(mouseEvent.getY() - gamePanel.getY());
				gamePanel.repaint();
			}
			
			@Override
			public void mouseMoved(MouseEvent mouseEvent) {
			}
		});
		
		addMouseListener(new MouseListener() {
			@Override
			public void mouseClicked(MouseEvent mouseEvent) {
			}
			
			@Override
			public void mousePressed(MouseEvent mouseEvent) {
				Piece piece = gamePanel.getChessPiece(mouseEvent.getX() - gamePanel.getX(),
						mouseEvent.getY() - gamePanel.getY());
				if(null != piece) {
					if(piece.getPieceColor().equals(gameField.getWhoseMoveExpected())) {
						gamePanel.setActiveChessPiece(piece);
					}
				}
			}
			
			@Override
			public void mouseReleased(MouseEvent mouseEvent) {
				if(null == gamePanel.getActiveChessPiece()) return;
				
				int x = gamePanel.getSquareX(mouseEvent.getX() - gamePanel.getX());
				int y = gamePanel.getSquareY(mouseEvent.getY() - gamePanel.getY());
				
				if(-1 != x && -1 != y) {
					if(drawIsActive) {
						drawIsActive = false;
						if(!gameField.tryToMove(gamePanel.getActiveChessPiece(), x, y)) {
						    drawIsActive = true;
						}
					} else {
						gameField.tryToMove(gamePanel.getActiveChessPiece(), x, y);
					}
				}
				
				drawButton.setEnabled(drawIsActive);
				if(!drawIsActive) previousDrawMessage = "";
				
				gamePanel.setActiveChessPiece(null);
				gamePanel.repaint();
			}
			
			@Override
			public void mouseEntered(MouseEvent mouseEvent) {
			}
			
			@Override
			public void mouseExited(MouseEvent mouseEvent) {
			}
		});
	}
	
	/**
	 * Initialisation of listeners of model.
	 */
	private void initModelListeners() {
		gameField.addGameOverListener(message -> {
			gamePanel.setActiveChessPiece(null);
			gamePanel.repaint();
			JOptionPane.showMessageDialog(null, message, "Game Over", INFORMATION_MESSAGE);
			gameField.restart();
			restart();
			gamePanel.repaint();
		});
		
		gameField.addMoveListener(piece -> {
			if(piece.getClass().getSimpleName().equals("Pawn") && (1 == piece.getY() || 8 == piece.getY())) {
				pieceChoice(piece);
			}
		});
		
		gameField.addDrawIsPossibleListener(message -> {
			drawButton.setEnabled(true);
			drawIsActive = true;
			
			if(!message.equals(previousDrawMessage)) {
				JOptionPane.showMessageDialog(null, message, "Rule is activated", INFORMATION_MESSAGE);
				previousDrawMessage = message;
			}
		});
	}
	
	/**
	 * Shows dialog window for choice of new chess piece instead a pawn.
	 */
	private void pieceChoice(Piece pawn) {
		gamePanel.setActiveChessPiece(null);
		gamePanel.repaint();
		ChessPieceChoice chessPieceChoice = new ChessPieceChoice(this, pawn);
		chessPieceChoice.setVisible(true);
	}
	
	private void createUIComponents() {
		gameField = new GameField();
		gamePanel = new GamePanel(gameField);
	}
	
	private void restart() {
		drawIsActive = false;
		drawButton.setEnabled(false);
		previousDrawMessage = "";
	}
	
	private String previousDrawMessage = "";
	private boolean drawIsActive = false;
	
	private GameField gameField = null;
	
	private JPanel mainPanel;
	private JPanel settingsPanel;
	private JButton restartButton;
	private GamePanel gamePanel;
	private JButton drawButton;
	
	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		mainPanel = new JPanel();
		mainPanel.setLayout(new GridBagLayout());
		settingsPanel = new JPanel();
		settingsPanel.setLayout(new GridBagLayout());
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 150.0;
		gbc.anchor = GridBagConstraints.SOUTH;
		mainPanel.add(settingsPanel, gbc);
		restartButton = new JButton();
		restartButton.setFocusPainted(false);
		restartButton.setText("Restart");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 2;
		gbc.weightx = 100.0;
		gbc.weighty = 300.0;
		settingsPanel.add(restartButton, gbc);
		final JPanel spacer1 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 4;
		gbc.fill = GridBagConstraints.VERTICAL;
		settingsPanel.add(spacer1, gbc);
		final JPanel spacer2 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 3;
		gbc.weighty = 20.0;
		gbc.fill = GridBagConstraints.VERTICAL;
		settingsPanel.add(spacer2, gbc);
		final JPanel spacer3 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.weightx = 30.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.ipadx = 1;
		settingsPanel.add(spacer3, gbc);
		final JPanel spacer4 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 2;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		settingsPanel.add(spacer4, gbc);
		drawButton = new JButton();
		drawButton.setEnabled(false);
		drawButton.setFocusPainted(false);
		drawButton.setText("Draw!");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.weightx = 100.0;
		gbc.weighty = 300.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		settingsPanel.add(drawButton, gbc);
		final JPanel spacer5 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 1;
		gbc.fill = GridBagConstraints.VERTICAL;
		gbc.ipady = 5;
		settingsPanel.add(spacer5, gbc);
		final JPanel spacer6 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.fill = GridBagConstraints.VERTICAL;
		mainPanel.add(spacer6, gbc);
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.weightx = 588.0;
		gbc.weighty = 600.0;
		gbc.anchor = GridBagConstraints.NORTHEAST;
		gbc.ipadx = 597;
		gbc.ipady = 600;
		mainPanel.add(gamePanel, gbc);
	}
	
	/** @noinspection ALL */
	public JComponent $$$getRootComponent$$$() {
		return mainPanel;
	}
}
